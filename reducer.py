# -*- coding: utf-8 -*-
"""reducer2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M4hdt9MnO3ZpuWkMzkxAr0fVfWnc69wZ
"""

#!/usr/bin/python3


from operator import itemgetter
import sys
import numpy as np

#initialisation
count = 0  # to get count of data instances in belonging to a centroid/cluster
currentmean = 0
CurrentSum = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
currentCentroid = None
centroid = None

#reading each line from standard input
for line in sys.stdin:
    line = line.strip()
    if line:
        centroid,dataInstance = line.split('\t') #get centroid and data instance
        datapointString = dataInstance.split(',',1)[1] #gets the numerical coordinates of the data
        datapointStringArray = datapointString.split(',') #gets each numerical value
        datapointArray = np.array(list(map(int,datapointStringArray))) #converts the string corrdinates to integer type coordinates
        # this 'if' runs only the first time to initialize currentCentroid ,CurrentSum and count
        if (currentCentroid == None): 
            currentCentroid = centroid
            count = count+1
            CurrentSum = datapointArray
        elif (centroid == currentCentroid): # increase count and add the coordinates belonging to same cluster
            count = count+1
            CurrentSum = CurrentSum + datapointArray
        else:
            if currentCentroid:
                currentmean = CurrentSum/count #find the average 
                strings = ["%d" % number for number in currentmean]
                my_string = ','.join(strings)
                print('%s,%s' % (currentCentroid, my_string))
            #reinitalize for the next cluster computations
            currentCentroid = centroid 
            CurrentSum = datapointArray
            count = 1
if currentCentroid == centroid: # to consider the last line
    count = count+1
    currentmean = CurrentSum/count
    strings = ["%d" % number for number in currentmean]
    my_string = ','.join(strings)
    print('%s,%s' % (currentCentroid, my_string))