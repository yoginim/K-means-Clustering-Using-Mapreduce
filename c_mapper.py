# -*- coding: utf-8 -*-
"""c_mapper

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s791zu_gqTHCp17rTMzKFThoF_EuSzHN
"""

import sys
import pandas as pd
import numpy as np



def euclidean(v1, v2):
    return sum((p-q)**2 for p, q in zip(v1, v2))

# get centroids list first
centroids = list()  # list of centroids , each centroid is stored as a tuple
count = 0
file = open('/content/home/centroids1.txt', 'r')
linesCentroid = file.readlines()
#get the trained centroids as input
for line in linesCentroid:
    label = line.split(',', 1)[0]  # get the alphabet
    datapoint = line.split(',', 1)[1]  # get the features
    array1 = datapoint.split(',')  # array of numbers in string form
    array1 = list(map(int, array1))  # convert string to integers
    c1 = (label, array1)
    centroids.append(c1)  # list of centroids created
file.close()


#give test data to form clusters
for line2 in sys.stdin:
    testdataLabel = line2.split(',', 1)[0]  # get the alphabet of test data
    datapoint2 = line2.split(',', 1)[1]
    array2 = datapoint2.split(',')
    array2 = list(map(int, array2))
    minimumDistance = -1 #initialisation of minimum distance
    currentlabel = ''
    templine = ''
    tempCentroids = centroids
    for center in centroids:  # loop the test data through each centroid
        centerLabel = center[0]  # get centroid label
        centerArray = center[1]
        distance = euclidean(array2, centerArray) # calculate eucliedean distance
        # check for the centroid with minimum distance
        if (distance == 0):
            minimumDistance = distance
            templine = line2
            currentlabel = centerLabel
        elif((distance > 0 and minimumDistance < 0) or (distance < minimumDistance)):
            minimumDistance = distance
            templine = line2
            currentlabel = centerLabel
    print('%s\t%s' % (currentlabel, testdataLabel)) # output centroid label and the data label with minimum distance