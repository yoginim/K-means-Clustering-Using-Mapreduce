# -*- coding: utf-8 -*-
"""mapper2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1stQMGpBELuirWf_eelOsRFbJGf8xKH7v
"""

#!/usr/bin/python3

import sys

# get centroids list first

def euclidean(v1, v2):
    return sum((p-q)**2 for p, q in zip(v1, v2))


centroids = list()#list of centroids , each centroid is stored as a tuple
file = open('centroids.txt','r')
linesCentroid = file.readlines()
for line in linesCentroid:
    label = line.split(',',1)[0] # get the alphabet
    datapoint = line.split(',',1)[1]#get the features
    array1 = datapoint.split(',') #array of numbers in string form
    array1 = list(map(int,array1))#convert string to integers
    c1 = (label,array1)
    centroids.append(c1)  #list of centroids created  
file.close()

for line2 in sys.stdin:
    label2 = line2.split(',', 1)[0]  # get the alphabet from test data
    datapoint2 = line2.split(',',1)[1]
    array2 = datapoint2.split(',')
    array2 = list(map(int,array2))
    minimumDistance = -1
    currentlabel = ''
    templine = ''
    tempCentroids = centroids
    for center in centroids: #gives each centroid
        centerLabel = center[0]#get centroid label
        centerArray = center[1]
        distance = euclidean(array2, centerArray)            

        if (distance == 0):
            minimumDistance = distance
            templine = line2
            currentlabel = centerLabel
        elif( (distance>0 and minimumDistance < 0) or (distance<minimumDistance)):
            minimumDistance = distance
            templine = line2
            currentlabel = centerLabel
    print ('%s\t%s' %(currentlabel,line2))